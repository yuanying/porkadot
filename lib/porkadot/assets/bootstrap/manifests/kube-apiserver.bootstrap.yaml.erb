<% k8s = global_config.k8s -%>
apiVersion: v1
kind: Pod
metadata:
  name: bootstrap-kube-apiserver
  namespace: kube-system
  labels:
    <%- labels = k8s.apiserver.labels.to_hash.dup -%>
    <%- labels[:'app.kubernetes.io/instance'] = 'kube-apiserver-porkadot-bootstrap' -%>
    <%- labels.each do |k, v| -%>
    <%= k.to_s %>: <%= v %>
    <%- end -%>
spec:
  hostNetwork: true
  containers:
  - name: kube-apiserver
    resources:
      requests:
        cpu: 250m
    image: <%= k8s.image_repository %>/kube-apiserver:<%= k8s.kubernetes_version %>
    command:
    - kube-apiserver
    <%- k8s.apiserver.args(bootstrap: true).each do |k, v| -%>
    - <%= k %><% if v ;%>=<%= v %><%; end %>
    <%- end -%>
    env:
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    volumeMounts:
    - mountPath: /etc/ca-certificates
      name: etc-ca-certificates
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ca-certs
      readOnly: true
    - mountPath: /usr/share/ca-certificates
      name: usr-share-ca-certificates
      readOnly: true
    - mountPath: /etc/kubernetes/pki
      name: secrets
      readOnly: true
    - mountPath: /var/lock
      name: var-lock
      readOnly: false
  volumes:
  - name: secrets
    hostPath:
      path: /etc/kubernetes/bootstrap/secrets
  - hostPath:
      path: /etc/ssl/certs
      type: DirectoryOrCreate
    name: ca-certs
  - hostPath:
      path: /usr/share/ca-certificates
      type: DirectoryOrCreate
    name: usr-share-ca-certificates
  - hostPath:
      path: /etc/ca-certificates
      type: DirectoryOrCreate
    name: etc-ca-certificates
  - name: var-lock
    hostPath:
      path: /var/lock
